diff --git a/libdeja/BackendGoogle.vala b/libdeja/BackendGoogle.vala
index 950e7d5d..5dca13c9 100644
--- a/libdeja/BackendGoogle.vala
+++ b/libdeja/BackendGoogle.vala
@@ -79,8 +79,9 @@ public class BackendGoogle : BackendOAuth
 
   public override async uint64 get_space(bool free = true)
   {
-    var message = new Soup.Message(
-      "GET", "https://www.googleapis.com/drive/v3/about?fields=storageQuota"
+    var message = Soup.Form.request_new(
+      "GET", "https://www.googleapis.com/drive/v3/about",
+      "fields", "storageQuota"
     );
     Json.Reader reader;
 
diff --git a/libdeja/BackendMicrosoft.vala b/libdeja/BackendMicrosoft.vala
index 07d73bc7..ebc9d97a 100644
--- a/libdeja/BackendMicrosoft.vala
+++ b/libdeja/BackendMicrosoft.vala
@@ -80,8 +80,9 @@ public class BackendMicrosoft : BackendOAuth
 
   public override async uint64 get_space(bool free = true)
   {
-    var message = new Soup.Message(
-      "GET", "https://graph.microsoft.com/v1.0/me/drive?select=quota"
+    var message = Soup.Form.request_new(
+      "GET", "https://graph.microsoft.com/v1.0/me/drive",
+      "select", "quota"
     );
     Json.Reader reader;
 
@@ -112,8 +113,9 @@ public class BackendMicrosoft : BackendOAuth
     }
 
     // Grab the drive ID in case a tool needs it
-    var message = new Soup.Message(
-      "GET", "https://graph.microsoft.com/v1.0/me/drive?select=id"
+    var message = Soup.Form.request_new(
+      "GET", "https://graph.microsoft.com/v1.0/me/drive",
+      "select", "id"
     );
     var reader = yield send_message(message);
     reader.read_member("id");
diff --git a/libdeja/BackendOAuth.vala b/libdeja/BackendOAuth.vala
index a23e210f..917af6af 100644
--- a/libdeja/BackendOAuth.vala
+++ b/libdeja/BackendOAuth.vala
@@ -105,18 +105,14 @@ public abstract class DejaDup.BackendOAuth : Backend
     // But when sending and reading all inside Soup, and then parsing the
     // bytes afterward in JSON-GLib, it seems to be more reliable.
     // TODO: investigate that more and file a bug as/if appropriate
-    var response = yield session.send_and_read_async(message, Priority.DEFAULT, null);
+    var response = yield session.send_async(message);
     if (message.status_code != Soup.Status.OK)
       return null;
 
-    var data = response.get_data();
-    if (data == null)
-      return null;
-
     // Assume utf-8, which is a safe enough per the spec:
     // https://datatracker.ietf.org/doc/html/rfc8259#section-8.1
     var parser = new Json.Parser();
-    if (!parser.load_from_data((string)data, data.length))
+    if (!yield parser.load_from_stream_async(response, null))
       return null;
     return new Json.Reader(parser.get_root());
   }
@@ -209,38 +205,38 @@ public abstract class DejaDup.BackendOAuth : Backend
 
   string get_consent_location()
   {
-    var form = Soup.Form.encode(
+    var message = Soup.Form.request_new(
+      "GET", auth_url,
       "client_id", client_id,
       "redirect_uri", get_redirect_uri(),
       "response_type", "code",
       "code_challenge", pkce,
       "scope", scope
     );
-    var message = new Soup.Message.from_encoded_form("GET", auth_url, form);
-    return message.uri.to_string();
+    return message.uri.to_string(false);
   }
 
   async void get_credentials(string code) throws Error
   {
-    var form = Soup.Form.encode(
+    var message = Soup.Form.request_new(
+      "POST", token_url,
       "client_id", client_id,
       "redirect_uri", get_redirect_uri(),
       "grant_type", "authorization_code",
       "code_verifier", pkce,
       "code", code
     );
-    var message = new Soup.Message.from_encoded_form("POST", token_url, form);
     yield get_tokens(message);
   }
 
   async void refresh_credentials() throws Error
   {
-    var form = Soup.Form.encode(
+    var message = Soup.Form.request_new(
+      "POST", token_url,
       "client_id", client_id,
       "refresh_token", refresh_token,
       "grant_type", "refresh_token"
     );
-    var message = new Soup.Message.from_encoded_form("POST", token_url, form);
     yield get_tokens(message);
   }
 
diff --git a/libdeja/CommonUtils.vala b/libdeja/CommonUtils.vala
index 97cb1448..f8595948 100644
--- a/libdeja/CommonUtils.vala
+++ b/libdeja/CommonUtils.vala
@@ -481,12 +481,9 @@ public async string get_file_desc(File file)
   catch (Error e) {}
 
   var desc = Path.get_basename(file.get_parse_name());
-  try {
-    var host = Uri.parse(file.get_uri(), UriFlags.NON_DNS).get_host();
-    if (host != null && host != "")
-      desc = _("%1$s on %2$s").printf(desc, host);
-  }
-  catch (UriError e) {}
+  var uri = new Soup.URI(file.get_uri());
+  if (uri != null && uri.host != null && uri.host != "")
+    desc = _("%1$s on %2$s").printf(desc, uri.host);
 
   return desc;
 }
diff --git a/meson.build b/meson.build
index 49bbc1e4..4dfdcafa 100644
--- a/meson.build
+++ b/meson.build
@@ -38,7 +38,7 @@ gtk_x11_dep = dependency('gtk4-x11', required: false)
 json_dep = dependency('json-glib-1.0', version: '>= 1.2')
 packagekit_dep = dependency('packagekit-glib2', version: '>= 1.2', required: get_option('packagekit'))
 secret_dep = dependency('libsecret-1', version: '>= 0.18.6')
-soup_dep = dependency('libsoup-3.0', version: '>= 3.0')
+soup_dep = dependency('libsoup-2.4', version: '>= 2.48')
 
 # Programs
 appstreamcli = find_program('appstreamcli', required: false)
