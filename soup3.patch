commit 0282cb18552c5ab8bef55e97ee5ab50f8144e8a4
Author: Michael Terry <mike@mterry.name>
Date:   Sat Jan 1 21:05:50 2022 -0500

    build: switch from soup-2.4 to soup-3.0
    
    This is a larger change (for packagers) than I'd normally do in a
    point release, but we're so close to 43.0's release, and I just
    didn't notice that soup 3.0 had released or I would have delayed
    43.0.
    
    Since most of 43's other dependencies are bright and shiny and new,
    it will probably be annoying down the line if we don't get off of
    soup-2.4 now.

diff --git a/libdeja/BackendGoogle.vala b/libdeja/BackendGoogle.vala
index 1de77744..bb5a4f13 100644
--- a/libdeja/BackendGoogle.vala
+++ b/libdeja/BackendGoogle.vala
@@ -67,9 +67,8 @@ public class BackendGoogle : BackendOAuth
 
   public override async uint64 get_space(bool free = true)
   {
-    var message = Soup.Form.request_new(
-      "GET", "https://www.googleapis.com/drive/v3/about",
-      "fields", "storageQuota"
+    var message = new Soup.Message(
+      "GET", "https://www.googleapis.com/drive/v3/about?fields=storageQuota"
     );
     Json.Reader reader;
 
diff --git a/libdeja/BackendMicrosoft.vala b/libdeja/BackendMicrosoft.vala
index eabde52a..867c08d2 100644
--- a/libdeja/BackendMicrosoft.vala
+++ b/libdeja/BackendMicrosoft.vala
@@ -74,9 +74,8 @@ public class BackendMicrosoft : BackendOAuth
 
   public override async uint64 get_space(bool free = true)
   {
-    var message = Soup.Form.request_new(
-      "GET", "https://graph.microsoft.com/v1.0/me/drive",
-      "select", "quota"
+    var message = new Soup.Message(
+      "GET", "https://graph.microsoft.com/v1.0/me/drive?select=quota"
     );
     Json.Reader reader;
 
@@ -107,9 +106,8 @@ public class BackendMicrosoft : BackendOAuth
     }
 
     // Grab the drive ID in case a tool needs it
-    var message = Soup.Form.request_new(
-      "GET", "https://graph.microsoft.com/v1.0/me/drive",
-      "select", "id"
+    var message = new Soup.Message(
+      "GET", "https://graph.microsoft.com/v1.0/me/drive?select=id"
     );
     var reader = yield send_message(message);
     reader.read_member("id");
diff --git a/libdeja/BackendOAuth.vala b/libdeja/BackendOAuth.vala
index 14cf07ba..9efb689f 100644
--- a/libdeja/BackendOAuth.vala
+++ b/libdeja/BackendOAuth.vala
@@ -75,7 +75,7 @@ public abstract class DejaDup.BackendOAuth : Backend
 
   async Json.Reader? send_message_raw(Soup.Message message) throws Error
   {
-    var response = yield session.send_async(message);
+    var response = yield session.send_async(message, Priority.DEFAULT, null);
     if (message.status_code != Soup.Status.OK)
       return null;
     var data = new uint8[5000]; // assume anything we read will be 5k or smaller
@@ -153,43 +153,43 @@ public abstract class DejaDup.BackendOAuth : Backend
 
   string get_consent_location()
   {
-    var message = Soup.Form.request_new(
-      "GET", auth_url,
+    var form = Soup.Form.encode(
       "client_id", client_id,
       "redirect_uri", local_address,
       "response_type", "code",
       "code_challenge", pkce,
       "scope", scope
     );
-    return message.uri.to_string(false);
+    var message = new Soup.Message.from_encoded_form("GET", auth_url, form);
+    return message.uri.to_string();
   }
 
   async void get_credentials(string code) throws Error
   {
-    var message = Soup.Form.request_new(
-      "POST", token_url,
+    var form = Soup.Form.encode(
       "client_id", client_id,
       "redirect_uri", local_address,
       "grant_type", "authorization_code",
       "code_verifier", pkce,
       "code", code
     );
+    var message = new Soup.Message.from_encoded_form("POST", token_url, form);
     yield get_tokens(message);
   }
 
   async void refresh_credentials() throws Error
   {
-    var message = Soup.Form.request_new(
-      "POST", token_url,
+    var form = Soup.Form.encode(
       "client_id", client_id,
       "refresh_token", refresh_token,
       "grant_type", "refresh_token"
     );
+    var message = new Soup.Message.from_encoded_form("POST", token_url, form);
     yield get_tokens(message);
   }
 
   // Returns true if are done with consent flow
-  bool process_server_request(Soup.Message message, string path,
+  bool process_server_request(Soup.ServerMessage message, string path,
                               HashTable<string, string>? query,
                               out string code, out string error_msg)
   {
@@ -197,11 +197,11 @@ public abstract class DejaDup.BackendOAuth : Backend
     error_msg = null;
 
     if (path != "/") {
-      message.status_code = Soup.Status.NOT_FOUND;
+      message.set_status(Soup.Status.NOT_FOUND, null);
       return false;
     }
 
-    message.status_code = Soup.Status.ACCEPTED;
+    message.set_status(Soup.Status.ACCEPTED, null);
 
     string? error = query == null ? null : query.lookup("error");
     if (error != null) {
@@ -217,7 +217,8 @@ public abstract class DejaDup.BackendOAuth : Backend
 
     // Show consent granted screen
     var html = DejaDup.get_access_granted_html();
-    message.response_body.append_take(html.data);
+    message.set_response("text/html; charset=UTF-8", Soup.MemoryUse.COPY,
+                         html.data);
     return true;
   }
 
@@ -227,7 +228,7 @@ public abstract class DejaDup.BackendOAuth : Backend
     var server = new Soup.Server("server-header",
                                  "%s/%s ".printf(Config.PACKAGE, Config.VERSION));
     server.listen_local(0, Soup.ServerListenOptions.IPV4_ONLY);
-    local_address = server.get_uris().data.to_string(false);
+    local_address = server.get_uris().data.to_string();
 
     // Prepare to handle requests that finish the consent process
     string error_msg = null;
diff --git a/libdeja/CommonUtils.vala b/libdeja/CommonUtils.vala
index 72b77027..04b7fff2 100644
--- a/libdeja/CommonUtils.vala
+++ b/libdeja/CommonUtils.vala
@@ -488,9 +488,12 @@ public string get_file_desc(File file)
   catch (Error e) {}
 
   var desc = Path.get_basename(file.get_parse_name());
-  var uri = new Soup.URI(file.get_uri());
-  if (uri != null && uri.host != null && uri.host != "")
-    desc = _("%1$s on %2$s").printf(desc, uri.host);
+  try {
+    var host = Uri.parse(file.get_uri(), UriFlags.NON_DNS).get_host();
+    if (host != null && host != "")
+      desc = _("%1$s on %2$s").printf(desc, host);
+  }
+  catch (UriError e) {}
 
   return desc;
 }
diff --git a/meson.build b/meson.build
index fc7da5f8..0de40427 100644
--- a/meson.build
+++ b/meson.build
@@ -37,7 +37,7 @@ gtk_x11_dep = dependency('gtk4-x11', required: false)
 json_dep = dependency('json-glib-1.0', version: '>= 1.2')
 packagekit_dep = dependency('packagekit-glib2', version: '>= 0.6.5', required: false)
 secret_dep = dependency('libsecret-1', version: '>= 0.18.6')
-soup_dep = dependency('libsoup-2.4', version: '>= 2.48')
+soup_dep = dependency('libsoup-3.0', version: '>= 3.0')
 
 # Programs
 appstream_util = find_program('appstream-util', required: false)
