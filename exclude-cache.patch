commit 8cccc573023182da8afbde2a688cb112fbbea379
Author: Michael Terry <mike@mterry.name>
Date:   Sun Oct 11 14:18:56 2020 -0400

    Always exclude ~/.cache
    
    We may be running confined with a custom cache path, but we still
    want to exclude the user's normal cache folder.
    
    There's no way to know if they have an unusual path for that, though.
    So we just guess at the default path of ~/.cache.
    
    https://gitlab.gnome.org/World/deja-dup/-/issues/56

diff --git a/libdeja/OperationBackup.vala b/libdeja/OperationBackup.vala
index e09f5a89..a69ffb14 100644
--- a/libdeja/OperationBackup.vala
+++ b/libdeja/OperationBackup.vala
@@ -74,13 +74,29 @@ public class DejaDup.OperationBackup : Operation
 
   void add_always_excluded_dirs(ref List<File> files, ref List<string> regexps)
   {
+    var cache_dir = Environment.get_user_cache_dir();
+    var home_dir = Environment.get_home_dir();
+
     // User doesn't care about cache
-    string dir = Environment.get_user_cache_dir();
-    if (dir != null) {
-      files.prepend(File.new_for_path(dir));
+    if (cache_dir != null) {
+      var cache = File.new_for_path(cache_dir);
+      files.prepend(cache);
+
+      // Always also exclude ~/.cache because we may be running confined with
+      // a custom cache path, but we still want to exclude the user's normal
+      // cache folder. No way to know if they have an unusual path for that,
+      // though. So we just guess at the default path.
+      if (home_dir != null) {
+        var home = File.new_for_path(home_dir);
+        var home_cache = home.get_child(".cache");
+        if (!cache.equal(home_cache)) {
+          files.prepend(home_cache);
+        }
+      }
+
       // We also add our special cache dir because if the user still especially
       // includes the cache dir, we still won't backup our own metadata.
-      files.prepend(File.new_for_path(Path.build_filename(dir, Config.PACKAGE)));
+      files.prepend(cache.get_child(Config.PACKAGE));
     }
 
     // Likewise, user doesn't care about cache-like directories in $HOME.
@@ -88,19 +104,19 @@ public class DejaDup.OperationBackup : Operation
     // historical reasons or for those apps that are both popular enough to
     // warrant special attention, we add some useful exclusions here.
     // When changing this list, remember to update the help documentation too.
-    dir = Environment.get_home_dir();
-    if (dir != null) {
-      files.prepend(File.new_for_path(Path.build_filename(dir, ".adobe/Flash_Player/AssetCache")));
-      files.prepend(File.new_for_path(Path.build_filename(dir, ".ccache")));
-      files.prepend(File.new_for_path(Path.build_filename(dir, ".gvfs")));
-      files.prepend(File.new_for_path(Path.build_filename(dir, ".Private"))); // encrypted copies of stuff in $HOME
-      files.prepend(File.new_for_path(Path.build_filename(dir, ".recent-applications.xbel")));
-      files.prepend(File.new_for_path(Path.build_filename(dir, ".recently-used.xbel")));
-      files.prepend(File.new_for_path(Path.build_filename(dir, ".steam/root")));
-      files.prepend(File.new_for_path(Path.build_filename(dir, ".thumbnails")));
-      files.prepend(File.new_for_path(Path.build_filename(dir, ".xsession-errors")));
-      regexps.prepend(Path.build_filename(dir, ".var/app/*/cache")); // flatpak
-      regexps.prepend(Path.build_filename(dir, "snap/*/*/.cache"));
+    if (home_dir != null) {
+      var home = File.new_for_path(home_dir);
+      files.prepend(home.resolve_relative_path(".adobe/Flash_Player/AssetCache"));
+      files.prepend(home.resolve_relative_path(".ccache"));
+      files.prepend(home.resolve_relative_path(".gvfs"));
+      files.prepend(home.resolve_relative_path(".Private")); // encrypted copies of stuff in $HOME
+      files.prepend(home.resolve_relative_path(".recent-applications.xbel"));
+      files.prepend(home.resolve_relative_path(".recently-used.xbel"));
+      files.prepend(home.resolve_relative_path(".steam/root"));
+      files.prepend(home.resolve_relative_path(".thumbnails"));
+      files.prepend(home.resolve_relative_path(".xsession-errors"));
+      regexps.prepend(Path.build_filename(home_dir, ".var/app/*/cache")); // flatpak
+      regexps.prepend(Path.build_filename(home_dir, "snap/*/*/.cache"));
     }
 
     // Skip all of our temporary directories
diff --git a/libdeja/tests/runner.vala b/libdeja/tests/runner.vala
index 2d3011ab..37b22681 100644
--- a/libdeja/tests/runner.vala
+++ b/libdeja/tests/runner.vala
@@ -171,7 +171,7 @@ string default_args(BackupRunner br, Mode mode = Mode.NONE, bool encrypted = fal
 
     string[] excludes1 = {"~/Downloads", "~/.local/share/Trash", "~/.xsession-errors", "~/.thumbnails",
                           "~/.steam/root", "~/.Private", "~/.gvfs", "~/.ccache",
-                          "~/.adobe/Flash_Player/AssetCache"};
+                           "~/.cache", "~/.adobe/Flash_Player/AssetCache"};
     foreach (string ex in excludes1) {
       ex = ex.replace("~", Environment.get_home_dir());
       if (FileUtils.test (ex, FileTest.IS_SYMLINK | FileTest.EXISTS))
